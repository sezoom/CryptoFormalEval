Full dataset password: TamarinMeetsLLMs2024##

 brew install ghcup
 brew install cabal-install
 cabal update
 cabal install --lib multiset
 cabal install --lib containers-0.7
 cabal install --lib mtl-2.3.1
 cabal install --lib parsec-3.1.18.0
 cabal install --lib split
 cabal install --lib directory-1.3.9.0

 ### before compiling formalizer anb, some changes applied to the code for file Complier.hs, Printer.hs

--------------------------
- gpt3.5 doen't generate correct prompting output
- all used models in the paper were trained in 2023 except claude 3.5 Sonnet april 2024
- current GPT > 8-2024

======================= all gpt 4.o ========================
Protocol 3:
4.0:
/*mixed the state for the rules, the private key not tie to the public key, not complete where B cant decrypt the message  */

4.0 mini:
/*Correct access to the state for each role except B should not know the Key untill adec should done*/

4.1 nano:
/*Review NOTES: A can read state B also B can read state of A*/

 gpt-4.1 mini:
/*NOTE: incomplete where B cant update the state for knowing Key without asymmetric decryption for using the private key.*/

gpt-o1-pro:
===========================================================
PROTOCOL 1
~~~~~~~~~~
gpt-4.o fixed the issue were reported in the original paper

// Rule for A initiating the protocol
rule A_1:
[ !SharedKey($A, $B, k),
Fr(~N),
Fr(~M) ]
--[ FreshTerm($A, ~M), Send($A, ~N) ]->
[ Out(~N),
St_A_1($A, $B, k, ~N, ~M) ]

updated, it still treated the message as fresh by adding ~:
// Initial knowledge setup
rule Init_Knowledge:
    [ Fr(~Kab) ]
    -->
    [ !SymmetricKey($A, $B, ~Kab) ]

// Role A
rule A_Sends_Nonce:
    [ Fr(~N), !SymmetricKey($A, $B, Kab) ]
    -->
    [ Out(~N), State_A($A, $B, ~N, Kab) ]
rule A_Sends_Encrypted_Message:
    [ State_A_Received($A, $B, N, Kab), Fr(~M) ]
    --[ FreshTerm($A, ~M) ]->
    [ Out(senc(~M, Kab)) ]


   Rate: 3


------
o1:
Rate:3
the FreshTerm inserted in the first rule instead of the third rule for Message

--
gpt4.1:
Rate:4
--
gpt4.1-mini
Rate:3
The message not initialized at the begining,. it was created fresh as nonce

----
gpt4.1-nano
Rate:1
wrong logic and code

--
o3
Rate:3
better format and explination.
The only issue is treating the message as fresh nonce instead of initial knowledge for A

---
gemini 1.5-flush
Rate:2
 - it treated the input as fresh by adding ~
 - The message as fresh nonce instead of initial knowledge for A

gemini 1.5-pro:
Rate:3
-FreshTerm should be used before sending the message
- sometimes using $A and sometimes A

gemini 2.5-flush
Rate:2
-syntax code issue for checking equality
- freshTerm check for the message done during the sent for n instead of M

gemini 2.5 pro
Rate:4
correct syntax
correct lemma


PROTOCOL 3
~~~~~~~~~~~~~

gemini1.5-flush
Rate: 1
- the message encrypted using asymmetric instead of symmetric
- the input marked as fresh
- the privatekey not linked to the public key

---
gemini1.5-pro
Rate: 2
- Agents are not matching sometimes using $A and sometimes A sometimes a
- the key should not be known to B from the first message

gemini 2.5-flush
Rate: 1
- fresh mark in Input ~
- sending the key in the network

gemini 2.5 pro
Rate:2
- Fresh mark for agent
- syntax error were for the pair <> not ()
- separate equality in let which is not valid Tamarin syntax
- The authenticity missunderstood, it should authenticate A to B

gpt-4.o:
Rate: 2
- the public key not mapped to the private key
- adding the key in the state which is still unknown in first recieve
- the authiticity should be applied to the last rule where be authenticate A

o1:
Rate: 3
- symantic error by swaping the security rules where the authenticate shall be placed after recieving the encrypted nonce

gpt4.1:
Rate:3
- adding the key in the state which is still unknown in first recieve

gpt-4.1-mini:
Rate: 2
- adding the key in the state which is still unknown in first recieve
- illegal fresh for the input
- Unbound M which not declared
-Missing key linkage in the last receive where N renamed as N2

gpt-4.1-nano:
Rate:1
- nonce should recieved from b not generated by A
- security rules not applied
- misunderstand the protocol
- syntax error were for the pair <> not ()
- illegal fresh for the input

o3:
Rate:4


PROTOCOL 5:
~~~~~~~~~~~~~~

gpt-4.o:
Rate:3
- the security rule never emit because its not created in the protocol

o1:
Rate: 3
- fresh in input
- Kab never created

gpt-4.1:
Rate:4
- minor mistake identity not defined as $A global variable or as alice and bob as constant, where currently not bounded. same for B
- rename hm to h(m), hN to h(N)

gpt-4.1-mini:
Rate: 2
- A and B not bounded, you can bound it as global vaiable $A or as constant alice
- wrong create/commit events placement and ordering
- fresh value in input for encrypted message
- rename hm to h(m), hN to h(N)

gpt-4.1-nano:
Rate:1
- many syantax mistakes

o3:
Rate: 4
- at later rules A and B not bounded, you can bound it as global vaiable $A
-fresh in input

gemini-1.5-flush:
Rate: 1
- wrong api, used asymmetric instead of symmetric encryption
- wrong location for the security rules
- syntax error were for the pair <> not ()
- Key fact never created
- Fresh variables in input

gemini-1.5-pro:
Rate:
